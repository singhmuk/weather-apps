{"version":3,"sources":["edit.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["Edit","props","useState","current","user","setUser","handleChange","e","target","name","value","useEffect","onSubmit","preventDefault","handleUpdate","_id","type","onChange","address","country","countries","map","id","BASE_URL","formState","App","mocks","setMocks","editing","setEditing","setCurrent","fatchData","a","axios","get","res","data","console","log","handleAdd","post","handleRemove","delete","filter","item","updates","put","onClick","handleEdit","Boolean","window","location","hostname","match","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55a277ef.chunk.js","sourcesContent":["import {useState, useEffect} from \"react\";\n\nconst Edit = (props) => {\n  const [user, setUser] = useState(props.current);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  useEffect(() => {\n    setUser(props.current)\n  },[props]);\n\n  return(\n    <div>\n      <form onSubmit = {(e) => {\n        e.preventDefault()\n        props.handleUpdate(user._id, user)\n      }}>\n        <input type=\"number\" name=\"id\" value={user._id} onChange={handleChange} />\n          <input type=\"text\" name=\"name\" value={user.name} onChange={handleChange} />\n          <input type=\"text\" name=\"address\" value={user.address} onChange={handleChange} />\n          \n          <select name=\"country\" value={user.country} onChange={handleChange}>\n            {props.countries.map((country) => (\n              <option key={country.id} value={country.name}>\n                {country.name}\n              </option>\n            ))}\n          </select>\n\n          <br/>\n          <button type=\"submit\">U</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Edit;","// export const BASE_URL = \"http://localhost:5000\"\nexport const BASE_URL = \"https://dropdawn.onrender.com\"","import { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Edit from \"./edit.js\";\n\nimport {BASE_URL} from \"./helper\"\n\n//Radio\nconst countries = [\n  { id: 1, name: 'India' },\n  { id: 2, name: 'USA' },\n  { id: 3, name: 'UK' },\n];\n\nconst formState = {id:0, name:'', address:''};\n\nconst App = () => {\n  const [user, setUser] = useState(formState);\n  const [mocks, setMocks] = useState([]);\n  const [editing, setEditing] = useState(false);\n  const [current, setCurrent] = useState([]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  useEffect(() => {\n    fatchData()\n  }, [user])\n\n  const fatchData = async () => {\n    const res = await axios.get(`${BASE_URL}/api/items`)\n      setMocks(res.data);\n      console.log('res',res)\n  }\n\n  const handleAdd = async () => {\n    await axios.post(`${BASE_URL}/api/items`, user);\n    setMocks([...mocks, user]);\n    setUser(formState)\n  }\n\n  const handleRemove =async (_id) => {\n    await axios.delete(`${BASE_URL}/api/items/${_id}`)\n    setMocks(mocks.filter(item => item._id !== _id))\n  }\n\n  const handleEdit = (user) => {\n    setEditing(true);\n    setCurrent({_id:user._id, name:user.name, address:user.address});\n  }\n\n  const handleUpdate = async (_id, updates) => {\n    setEditing(false);\n    const res = await axios.put(`${BASE_URL}/api/items/${_id}`, updates)\n    setMocks(mocks.map(item => (item._id === _id ? res.data : item)));\n  }\n\n  return (\n    <div>\n      {editing ? (\n        <Edit current={current} countries={countries} handleUpdate = {handleUpdate} />\n      ):(\n        <form onSubmit={(e) => {\n          e.preventDefault()\n          handleAdd(user)\n        }}>\n          <input type=\"number\" name=\"id\" value={user._id} onChange={handleChange} />\n          <input type=\"text\" name=\"name\" value={user.name} onChange={handleChange} />\n          <input type=\"text\" name=\"address\" value={user.address} onChange={handleChange} />\n\n          <select name=\"country\" value={user.country} onChange={handleChange}>\n            <option value=\"\">Select Country</option>\n            {countries.map((country) => (\n              <option key={country.id} value={country.name}>\n                {country.name}\n              </option>\n            ))}\n          </select>\n\n          <br/>\n          <button type=\"submit\">Add</button>\n        </form>\n      )}\n      {mocks.map(item => (\n        <li key={item._id}>\n          {item._id} - {item.name} - {item.address} - {item.country}\n          <button onClick={()=>handleRemove(item._id)}>X</button>\n          <button onClick={()=>handleEdit(item)}>E</button>\n        </li>\n      ))}\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createRoot } from 'react-dom/client';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}