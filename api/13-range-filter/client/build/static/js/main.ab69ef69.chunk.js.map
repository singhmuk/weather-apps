{"version":3,"sources":["App.js","helper.js","serviceWorker.js","index.js"],"names":["Items","useState","items","setItems","minPrice","setMinPrice","maxPrice","setMaxPrice","startDate","setStartDate","endDate","setEndDate","categories","setCategories","useEffect","handleFatch","a","axios","get","params","res","data","type","name","value","onChange","e","target","id","selected","date","isMulti","options","label","selectedOptions","onClick","map","item","price","category","join","_id","Boolean","window","location","hostname","match","createRoot","document","getElementById","render","StrictMode","App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAqFeA,EA7ED,WACZ,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,mBAAS,MAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAW,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,UCpBA,gCDoBA,cAAmC,CACnDC,OAAQ,CAAEf,WAAUE,WAAUE,YAAWE,UAASE,gBAFpC,OACVQ,EADU,OAIhBjB,EAASiB,EAAIC,MAJG,2CAAH,qDAqBjB,OACE,gCACE,6BAAI,UAEJ,gCAAK,6BAGH,uBAAOC,KAAK,SAASC,KAAK,WAAWC,MAAOpB,EAAUqB,SAjBvC,SAACC,GACpB,MAAsBA,EAAEC,OAAXH,GAAb,EAAOD,KAAP,EAAaC,OACbnB,EAAYmB,MAewE,aAGhF,uBAAOF,KAAK,SAASC,KAAK,WAAWC,MAAOlB,EAAUmB,SAftC,SAACC,GACrB,MAAsBA,EAAEC,OAAXH,GAAb,EAAOD,KAAP,EAAaC,OACbjB,EAAYiB,MAcR,uBAAK,cAGL,cAAC,IAAD,CAAYI,GAAG,YAAYC,SAAUrB,EAAWiB,SAAU,SAACK,GAAD,OAAUrB,EAAaqB,MAAS,YAG1F,cAAC,IAAD,CAAYF,GAAG,UAAUC,SAAUnB,EAASe,SAAU,SAACK,GAAD,OAAUnB,EAAWmB,MAAS,cAEpF,cAAC,IAAD,CAAQF,GAAG,aAAaG,SAAO,EAC7BC,QAAS,CACP,CAAER,MAAO,YAAaS,MAAO,cAC7B,CAAET,MAAO,YAAaS,MAAO,cAC7B,CAAET,MAAO,YAAaS,MAAO,eAE/BT,MAAOZ,EACPa,SAAU,SAACS,GAAD,OAAqBrB,EAAcqB,MAG/C,wBAAQC,QA3CO,WACnBpB,KA0CI,SAA+B,qBAGjC,gCACE,6BAAI,eACHb,EAAMkC,KAAI,SAACC,GAAD,OACT,gCAAoB,UAAQA,EAAKd,KAAK,aAAWc,EAAKC,MAAM,YAAUD,EAAKP,KAAK,gBACjEO,EAAKE,SAASC,KAAK,QADxBH,EAAKI,eEhELC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZOC,qBAAWC,SAASC,eAAe,SAC3CC,OACD,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAD,SDyHF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab69ef69.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport Select from 'react-select';\n\nimport {BASE_URL} from \"./helper\";\n\nconst Items = () => {\n  const [items, setItems] = useState([]);\n  const [minPrice, setMinPrice] = useState('');\n  const [maxPrice, setMaxPrice] = useState('');\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    handleFatch();\n  }, []);\n\n  const handleFatch = async () => {\n      const res = await axios.get(`${BASE_URL}/api/items`, {\n        params: { minPrice, maxPrice, startDate, endDate, categories },\n      });\n      setItems(res.data);\n  };\n\n  const handleFilter = () => {\n    handleFatch();\n  };\n\n  const handleChange = (e) => {\n    const {name, value} = e.target;\n    setMinPrice(value)\n  }\n\n  const handleChange2 = (e) => {\n    const {name, value} = e.target;\n    setMaxPrice(value)\n  }\n\n  return (\n    <div>\n      <h2>Items</h2>\n\n      <div>\n        Filter Options:\n        Min Price:\n        <input type=\"number\" name=\"minPrice\" value={minPrice} onChange={handleChange} />\n\n        Max Price:\n        <input type=\"number\" name=\"maxPrice\" value={maxPrice} onChange={handleChange2} />\n        <br/>\n\n        Start Date:\n        <DatePicker id=\"startDate\" selected={startDate} onChange={(date) => setStartDate(date)} />\n\n        End Date:\n        <DatePicker id=\"endDate\" selected={endDate} onChange={(date) => setEndDate(date)} />\n        Categories:\n        <Select id=\"categories\" isMulti\n          options={[\n            { value: 'category1', label: 'Category 1' },\n            { value: 'category2', label: 'Category 2' },\n            { value: 'category3', label: 'Category 3' },\n          ]}\n          value={categories}\n          onChange={(selectedOptions) => setCategories(selectedOptions)}\n        />\n\n        <button onClick={handleFilter}>Apply Filters</button>\n      </div>\n\n      <div>\n        <h3>Items List</h3>\n        {items.map((item) => (\n          <div key={item._id}> Name: {item.name} - Price: {item.price} - Date: {item.date} - \n              Category: {item.category.join(', ')}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Items;\n","// export const BASE_URL = \"http://localhost:5000\"\nexport const BASE_URL = \"https://dropdawn.onrender.com\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createRoot } from 'react-dom/client';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}