{"version":3,"sources":["App.js","helper.js","serviceWorker.js","index.js"],"names":["Add","useState","lists","setList","total","setTotal","activePage","setActivePage","useEffect","fetchData","a","axios","get","params","page","size","res","data","users","className","dataLength","length","next","hasMore","loader","endMessage","map","item","name","_id","Boolean","window","location","hostname","match","createRoot","document","getElementById","render","StrictMode","App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNA6CeA,EAtCH,WACV,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,MACC,IAGH,IAAMA,EAAS,uCAAG,4BAAAC,EAAA,sEAGEC,IAAMC,IAAN,UCnBE,4CDmBF,cAAmC,CAAEC,OAAQ,CAAEC,KAAMR,EAAYS,KAdzE,KAWM,OAGVC,EAHU,OAIhBb,EAAQ,GAAD,mBAAKD,GAAL,YAAec,EAAIC,KAAKC,SAC/BX,EAAcD,EAAa,GAC3BD,EAASW,EAAIC,KAAKb,OANF,2CAAH,qDASf,OACE,qBAAKe,UAAU,MAAf,SACE,cAAC,IAAD,CACEC,WAAYlB,EAAMmB,OAClBC,KAAMb,EACNc,QAASrB,EAAMmB,OAASjB,EACxBoB,OAAQ,4CACRC,WAAY,0DALd,SAOGvB,EAAMwB,KAAI,SAACC,GAAD,OACT,8BACE,6BAAKA,EAAKC,KAAO,IAAMD,EAAKE,OADpBF,EAAKE,aExBLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZOC,qBAAWC,SAASC,eAAe,SAC3CC,OACD,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAD,SDyHF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c77b8986.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport {BASE_URL} from \"./helper\";\n\nconst LIMIT = 5;\nconst Add = () => {\n  const [lists, setList] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [activePage, setActivePage] = useState(1);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n\n  const fetchData = async () => {\n    // The query parameters should be passed as an object in the second argument, not directly as \n    // separate parameters. \n    const res = await axios.get(`${BASE_URL}/api/items`, { params: { page: activePage, size: LIMIT } });\n    setList([...lists, ...res.data.users]);\n    setActivePage(activePage + 1);\n    setTotal(res.data.total);\n  }\n\n  return (\n    <div className=\"app\">\n      <InfiniteScroll\n        dataLength={lists.length}\n        next={fetchData}\n        hasMore={lists.length < total}\n        loader={<h4>Loading...</h4>}\n        endMessage={<b>Yay! You have seen it all</b>}\n      >\n        {lists.map((item) => (\n          <div key={item._id}>\n            <h1>{item.name + \" \" + item._id}</h1>\n          </div>\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default Add;\n","// export const BASE_URL = \"http://localhost:5000\"\nexport const BASE_URL = \"https://infinite-scroll-pfg6.onrender.com\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createRoot } from 'react-dom/client';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}