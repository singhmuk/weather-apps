{"version":3,"sources":["App.js","helper.js","serviceWorker.js","index.js"],"names":["App","useState","filteredData","setFilteredData","categories","setCategories","prices","setPrices","price_asc","price_desc","sorts","setSorts","useEffect","fetchFilteredData","a","axios","get","params","category","length","undefined","price","sort","Object","keys","filter","option","join","res","data","handleCategory","e","target","value","checked","handlePrice","handleSort","name","prevSortOptions","type","onChange","includes","map","item","_id","Boolean","window","location","hostname","match","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NA0GeA,EArGH,WACV,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0BN,mBAAS,CAAEO,WAAW,EAAOC,YAAY,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,CAACT,EAAYE,EAAQI,IAExB,IAAMG,EAAiB,uCAAG,4BAAAC,EAAA,sEACJC,IAAMC,IAAN,UCfA,6CDeA,cAAmC,CACnDC,OAAQ,CACNC,SAAUd,EAAWe,OAAS,EAAIf,OAAagB,EAC/CC,MAAOf,EAAOa,OAAS,EAAIb,OAASc,EACpCE,KAAMC,OAAOC,KAAKd,GAAOe,QAAO,SAACC,GAAD,OAAYhB,EAAMgB,MAASC,KAAK,QAL9C,OAChBC,EADgB,OAQtBzB,EAAgByB,EAAIC,MARE,2CAAH,qDAWjBC,EAAiB,SAACC,GACtB,MAA2BA,EAAEC,OAArBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAEb7B,EADE6B,EACY,GAAD,mBAAK9B,GAAL,CAAiB6B,IAEhB7B,EAAWqB,QAAO,SAACP,GAAD,OAAcA,IAAae,OAIzDE,EAAc,SAACJ,GACnB,MAA2BA,EAAEC,OAArBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAEb3B,EADE2B,EACQ,GAAD,mBAAK5B,GAAL,CAAa2B,IAEZ3B,EAAOmB,QAAO,SAACJ,GAAD,OAAWA,IAAUY,OAI3CG,EAAa,SAACL,GAClB,MAA0BA,EAAEC,OAApBK,EAAR,EAAQA,KAAMH,EAAd,EAAcA,QACdvB,GAAS,SAAC2B,GAAD,mBAAC,eAAyBA,GAA1B,kBAA4CD,EAAMH,QAG7D,OACE,gCACE,uDACA,4CAEM,uBAAOK,KAAK,WAAWN,MAAM,cAAcO,SAAUV,EACnDI,QAAS9B,EAAWqC,SAAS,iBAHrC,cAMM,uBAAOF,KAAK,WAAWN,MAAM,WAAWO,SAAUV,EAChDI,QAAS9B,EAAWqC,SAAS,cAPrC,WAUM,uBAAOF,KAAK,WAAWN,MAAM,YAAYO,SAAUV,EACjDI,QAAS9B,EAAWqC,SAAS,eAXrC,eAeA,yCAEM,uBAAOF,KAAK,WAAWN,MAAM,KAAKO,SAAUL,EAC1CD,QAAS5B,EAAOmC,SAAS,QAHjC,MAOM,uBAAOF,KAAK,WAAWN,MAAM,MAAMO,SAAUL,EAC3CD,QAAS5B,EAAOmC,SAAS,SARjC,OAYM,uBAAOF,KAAK,WAAWN,MAAM,MAAMO,SAAUL,EAC3CD,QAAS5B,EAAOmC,SAAS,SAbjC,UAiBA,gCACM,uBAAOF,KAAK,WAAWF,KAAK,YAAYH,QAASxB,EAAMF,UACrDgC,SAAUJ,IAFlB,qBAKM,uBAAOG,KAAK,WAAWF,KAAK,aAAaH,QAASxB,EAAMD,WACtD+B,SAAUJ,IANlB,wBAUA,iDACA,6BACGlC,EAAawC,KAAI,SAACC,GAAD,OAChB,+BACGA,EAAKN,KADR,gBAC2BM,EAAKzB,SADhC,eACsDyB,EAAKtB,QADlDsB,EAAKC,cErFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZOC,qBAAWC,SAASC,eAAe,SAC3CC,OACD,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,SDyHF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd3d99c7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport {BASE_URL} from \"./helper\";\n\nconst App = () => {\n  const [filteredData, setFilteredData] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [prices, setPrices] = useState([]);\n  const [sorts, setSorts] = useState({ price_asc: false, price_desc: false });\n\n  useEffect(() => {\n    fetchFilteredData();\n  }, [categories, prices, sorts]);\n\n  const fetchFilteredData = async () => {\n      const res = await axios.get(`${BASE_URL}/api/items`, {\n        params: {\n          category: categories.length > 0 ? categories : undefined,\n          price: prices.length > 0 ? prices : undefined,\n          sort: Object.keys(sorts).filter((option) => sorts[option]).join(','),\n        },\n      });\n      setFilteredData(res.data);\n  };\n\n  const handleCategory = (e) => {\n    const { value, checked } = e.target;\n    if (checked) {\n      setCategories([...categories, value]);\n    } else {\n      setCategories(categories.filter((category) => category !== value));\n    }\n  };\n\n  const handlePrice = (e) => {\n    const { value, checked } = e.target;\n    if (checked) {\n      setPrices([...prices, value]);\n    } else {\n      setPrices(prices.filter((price) => price !== value));\n    }\n  };\n\n  const handleSort = (e) => {\n    const { name, checked } = e.target;\n    setSorts((prevSortOptions) => ({...prevSortOptions, [name]:checked }));\n  };\n\n  return (\n    <div>\n      <h1>Filtering and Sorting</h1>\n      <div>\n       Category:\n            <input type=\"checkbox\" value=\"electronics\" onChange={handleCategory}\n              checked={categories.includes('electronics')}\n            />\n            Electronics\n            <input type=\"checkbox\" value=\"clothing\" onChange={handleCategory}\n              checked={categories.includes('clothing')}\n            />\n            Clothing\n            <input type=\"checkbox\" value=\"furniture\" onChange={handleCategory}\n              checked={categories.includes('furniture')}\n            />\n            Furniture\n      </div>\n      <div>\n        Price:\n            <input type=\"checkbox\" value=\"50\" onChange={handlePrice}\n              checked={prices.includes('50')}\n            />\n            $50\n      \n            <input type=\"checkbox\" value=\"100\" onChange={handlePrice}\n              checked={prices.includes('100')}\n            />\n            $100\n       \n            <input type=\"checkbox\" value=\"200\" onChange={handlePrice}\n              checked={prices.includes('200')}\n            />\n            $200\n      </div>\n      <div>\n            <input type=\"checkbox\" name=\"price_asc\" checked={sorts.price_asc}\n              onChange={handleSort}\n            />\n            Price: Low to High\n            <input type=\"checkbox\" name=\"price_desc\" checked={sorts.price_desc}\n              onChange={handleSort}\n            />\n            Price: High to Low\n      </div>\n      <h2>Filtered Items:</h2>\n      <ul>\n        {filteredData.map((item) => (\n          <li key={item._id}>\n            {item.name} - Category: {item.category} -  Price: ${item.price}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","// export const BASE_URL = \"http://localhost:5000\"\nexport const BASE_URL = \"https://filtering-and-sorting.onrender.com\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createRoot } from 'react-dom/client';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}